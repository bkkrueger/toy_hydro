- You may have a parameter that is meaningful across units (e.g., some length
  scale that sets the strength of gravity and also controls some aspect of your
  initial model), so we want the user to be able to grab the runtime parameters
  and sort them as the user sees fit.  Therefore, the runtime parameters unit
  will have a namespace for runtime parameters.  In that namespace will be
  program details (command-line options and such) and other namespaces: one for
  each unit included in the code; these have the runtime parameters in them.
  Then the user (in the unit initialization routines) can grab the runtime
  parameters however he or she sees fit and store them as desired in the unit.


- How to add new parameters?
- Things that should be associated with a new runtime parameter:
  - parameter name (e.g. hydro_reconstruction_method)
  - the variable type (e.g. string)
  - the default value (e.g. PPM)
  - the allowed values (e.g. parabolic, linear, constant) --- optional
    - Can this be extended to include ranges of integers and real numbers?
  - a descriptive comment (e.g. "The method of reconstructing the interface
    states for the Riemann problem.")
- Need to make sure that capitalization is respected or ignored as appropriate:
  - If I develop an interface analagous to FLASH's RuntimeParameter_get
    function, it may not matter --- I will only access things by strings, so I
    can convert everything to lowercase inside the "get" function to hide any
    capitalization inconsistencies.  This also avoids unintential errors (e.g.
    if I list useGravity as the parameter name in the _config file, but then in
    my parameter file for a given run write it as usegravity or UseGravity then
    the runtime parameter will end up with the default value and I will have an
    unrecognized parameter that doesn't feed into my code).
  - The values for string variables may or may not need capitalization to be
    respected (same with allowed values).

- To add new runtime parameters for your unit, 




Example: _parameters
# =============================================================================

# The mass for inverse-squared gravity
grav_mass   real  0.0   [0.0,]

# =============================================================================



1) Add runtime parameters
   - Parameter name
   - Parameter type (string, real/float, logical/boolean, integer)
   - Default value
     - May specify no default (force the user to supply a value)
   - optional: Allowed values (ranges and/or lists)
     - specific values: 1, 3, 5, 7, 9
     - ranges:
       - use standard bracket notation:
         - (a,b) is equivalent to a < x < b
         - [a,b] is equivalent to a <= x <= b
         - can mix: (a,b] or [a,b)
         - open-ended: [0.0,) or [0.0,] are both equivalent to 0.0 <= x
     - allow mixing: (0,10], 11, 12, 13, 14, [15,)
     - allow arbitrary whitespace: strip before processing to ignore it
   - optional: Description
2) Add grid variables
   - I like the PLUTO idea of number of dimensions (dimensionality of a
     simulation) vs. number of components (dimensionality of vectors) to allow
     things like 2.5D (e.g., rotation in cylindrical symmetry)
   - Should vectors be treated specially or as N_component scalars?
3) Specify units
   - Which units? e.g. include EoS and Gravity, but not HeatSource
   - Which versions?
     - May not care: e.g., give me a Grid and I will fill it and compute on it
     - May need a specific version: e.g., give me Frank Timmes' Helmholtz EOS
     - May have a preference: e.g., give me self-gravity if possible,
       enclosed-mass gravity as my second choice, and inverse-squared gravity
       as my third choice, but no others are acceptible
